title: Symbolic Differentiation: Part 1

-Symbolic Differentiation-
Symbolic differentiation involves two things. Firstly a symbolic representation of a function, and secondly differentiation. Let's tackle the first part. In a typical program we 
might write something like this:

```C
int x = 100;
```

This expression lets us assign a value to the program variable `x`. Any operation we perform with `x` now operates on the value that we've assigned to `x` (in this case `100`).
A symbolic perspective of `x` would say that `x` can be any value, and that we will operate on `x` as such. Whatever manipulations we perform on `x`, or however we compose it with 
other symbols, we will not assign it a value (at least for the time being). Every operation made on `x` is done with the understanding that `x` can take on any value. In this way
`x` is not a variable in a programming sense but `x` ***is itself the value*** of a program variable representing a symbol in a mathematical expression / term. Later we will see
the exact way we will represent this programmatically but it will look a little something like this:

```python
var_x = Term(TermType.VAR, ["x"])
```

In this way, `var_x` represents the mathematical symbol $x$, and we can program various operators which operate on `var_x` to represent mathematical operations on $x$ itself.
This leads us to the second part of ***Symbolic Differentiation***; differentiation. The main mathematical operation we will seek to represent is this mathematical operation.
We will do this symbolically so as to allow us to compute the derivative of a given function for all inputs of its dependant variable.

-Operators-

But first, what are operators? Operators are mathematical functions which we will represent symbolically in our program.

You've probably seen a mathematical function in math class before. These include $f(x), g(x), f(x, y)$ and so on. The ***arity*** of a function is the number of parameters it has.
$f(x)$ is of arity $1, f(x, y)$ is of arity $2$. Functions like these will thus be represented as unary and binary operators. Additionally we will introduce the usage of $0$ arity functions
through the use of constants.

***Zero Arity Operator (constant):***

-->c(·) → $c$

***Unary Operators:***

-->neg(x) → $-x$

-->ln(x) → $ln(x)$

-->sin(x) → $sin(x)$

-->cos(x) → $cos(x)$

-->tan(x) → $tan(x)$

***Binary Operators:***

-->+(a, b) → $a + b$

-->-(a, b) → $a - b$

-->$*$(a, b) → $a \times b$

-->/(a, b) → $\frac{a}{b}$

-->pow(a, b) → $a^b$

***For now we will only deal with a subset of these and will incorporate more in future posts:***

-->c(·) → $c$

-->neg(x) → $-x$

-->+(a, b) → $a + b$

-->-(a, b) → $a - b$

-->$*$(a, b) → $a \times b$

-->/(a, b) → $\frac{a}{b}$

In a matermatical sense we can compose these operators with the help of a brackets to unambiguosly represent complex mathematical
expressions / terms.

For example the matermatical expression:

$f = \frac{(x + c_1)(x - c_2)}{x \cdot x}$

Would be represented as:

$f = /(*(+(x, c_1), -(x, c_2)),*(x, x))$

Where x is a variable, and $c_1$ and $c_2$ are constants.

-Formal Languages-

Expressions like the one above imply the existance of a ***formal language***. According to [Wolfram Alpha](https://mathworld.wolfram.com/FormalLanguage.html) a formal language
is defined by an alphabet and a set of formation rules.

The alphabet is a set of atomic symbols which are considered to be the most of elements (we will call them atomic terms) of a language. All other terms in the language are defined
by using the set of formation rules in the language on the atomic terms. We will define the formal language for our problem as follows:

Our atomic terms will consist of constants and variables.

***Constants:*** 1, 2, 3, ...

***Variables:*** x, y, z, ...

$\mathcal{A} = constants \cup variables$

Our formation rules will consist of the unary and binary operators we described previously. Let this set be:

$\mathcal{R} = \{+, -, *, /\}$

This then defines our language:

$\mathcal{L} = \{A, R\}$

In this language:

-->$c \in \mathcal{L}$ where $c \in \mathcal{A}$ is a constant

-->$x \in \mathcal{L}$ where $x \in \mathcal{A}$ is a variable

-->if $a \in \mathcal{L}$ and $r \in \mathcal{R}$ is a unary operator then $r(a) \in \mathcal{L}$

-->if $a, b \in \mathcal{L}$ and $r \in \mathcal{R}$ then $r(a, b) \in \mathcal{L}$ for binary operator $r$

Then all $a \in \mathcal{L}$ are called terms and each of them that are not atomic have a recursive structure by construction.
But what does a does it mean for a term to have a recursive structure? In this case a term is recursive if it is made up of other terms.

-Structural Recursion-

***Structural Recursion*** is recursion that operates on a recursive structure by executing on the parts of said recursive
structure and then combining the individual results in some fashion. Like in the case of our formal language, recursive structures typically
have some sort of atomic elements. These atomic elements are the key components in a structurally recursive algorithm's base case(s).
In our case, the atomic terms of our formal language (namely constants and variables) will guid our base cases.

Lets define a structurally recursive algorithm `foo(S)` on the terms of our formal language. `foo(S)` takes in a term from our language and returns a value.
An implementation of `foo(S)` could look something like this is psuedocode:

```python
def foo(S):
    if S is CONST:
        return str(S)
    elif S is VARIABLE:
        return str(S)
    elif S is ADD:
        return "(" + S.arg1 + " + " + S.arg2 + ")"
    ...
```

In this blog post we will define a couple of structural recusion algorithms. Namely `__repr__`: a function get a easily readable format of our terms.
`diffy`: a function to perform differentiation from calculus on our terms, and `simp`: a function which will simplify our terms.

-Bringing our Formal Language to life-

To simplify the writing of our symbolic differntiator, we will use [Python](https://w.wiki/PoF) because its a [dynamically typed language](https://en.wikipedia.org/wiki/Dynamic_programming_language).
We will now define a class in Python to represent our terms from our formal language. To support all of our needs, we will need to a sufficiently generalized representation.
Our `Term` class needs to be able to represent zero-arity, binary and unary terms from our language. As such, we will use a list in python to represent the arguments to the terms from
our formal language.

We will also need a way to distinguish between different term types. For this we will introduce a `TermType` enum class. Each `Term` instance will have a member called `type`, indicating 
the term type with a value from the `TermType` class. Here's our first implementation of the `TermType` and `Term` classes.

```python
from enum import Enum
from typing import List

class TermType(Enum):
    """ An Enum representing the type of a Term. """
    CONST = 0
    VAR = 1
    ADD = 2
    SUB = 3
    NEG = 4
    MUL = 5
    DIV = 6

class Term:
    """ A class representing terms from our formal language. """
    type: TermType
    args: List

    def __init__(self, type: TermType, args: List) -> None:
        self.type = type
        self.args = args
```

-Yuck!-
Now we're actually able to represent all of the term types in our formal language programmatically.
Take the expression $f$ that we saw earlier:

$f = /(*(+(x, c_1), -(x, c_2)),*(x, x))$

Programatically we can represent this as follows:

```python
>>> Term(TermType.DIV, [Term(TermType.MUL, [Term(TermType.ADD, [Term(TermType.VAR, ["x"]), Term(TermType.CONST, ["2"])]), Term(TermType.SUB, [Term(TermType.VAR, ["x"]), Term(TermType.CONST, ["3"])])]), Term(TermType.MUL, [Term(TermType.VAR, ["x"]), Term(TermType.VAR, ["x"])])])
```

Honestly, you might be pretty close to puking. Making someone write this out to represent a simple expression let alone
something a more complex would be madness.

To solve this problem, we're going to take advantage of a neat little feature that some object orient programming languages offer.
Namely ***Operator Overloading***. Operator Overloading lets us use the built in operators of a programming language
to operate on class instances instead of just the typical atomic types of a language. Take for example the expression `1 + 2`.
As an expression, our program would know to add those two numbers to `3`. Now imagine a `Fruit` class, and two of its instances
`apple` and `orange`. What does `apple + orange` mean? Operator Overloading allows us to create our own ***semantics***, that is
a meaning for such expressions. In this case we could define `apple + orange --> fruit salad`.

In Python this is done via special functions called magic functions, because ... well .... they're magic. Lets see how we could 
use this to solve our problem.

Let's say we want to represent `x + x` from our formal language programmatically. Let's take a look at the modifications we'll need
to make to our `Term` class to achieve this.

```python
class Term:
    ...
    def __add__(self, other):
        return Term(TermType.ADD, [self, other])
```

Now when we write `x + x`, under the hood python calls `__add__` on the first instance, passing the second instance as the `other` parameter.
In this way we can generate the expression `x + x` without havok to use verbose syntax. Let's do the same for the other operators. The 
complete code will look like this:

```python
class Term:
    ...
    def __add__(self, other):
        return Term(TermType.ADD, [self, other])
    def __sub__(self, other):
        return Term(TermType.SUB, [self, other])
    def __neg__(self, other):
        return Term(TermType.NEG, [self])
    def __mul__(self, other):
        return Term(TermType.MUL, [self, other])
    def __truediv__(self, other):
        return Term(TermType.DIV, [self, other])
```

A small note here that `__neg__` overloads the unary negation operator:

```python
Term(TermType.NEG, ["x"]) --> -x
```

Now we're able to represent our term `f` using some much cleaner notation.

```python
>>> f = ((x + c1) * (x - c2)) / (x * x)
```

-Pretty Printing-
Now if you print the expression `f` that we defined earlier you'll get a very unsatisfactory output from the console.

```python
>>> print(f)
>>> <diffy.Term object at 0x1028fe160>
```

To get a nice, human readable output, we'll want to define another magic function. This one is called `__repr__` and 
it returns a printable representation of our `Term` instances. In this case we'll be returning a string that represents
a given `Term`. This is where structural recursion comes into play again. The `__repr__` function we write will make use
of the representation of it's arguments to define it's own representation. For binary terms, we first get the representation
of its argument terms, and then construct a string to represent the current term given its type. This looks a little something
like this:

```python
class Term:
    ...
    def __repr__(self) -> str:
        """ Generate a string representation of this term. """
        if self.type == TermType.CONST:
            return self.args[0]
        elif self.type == TermType.VAR:
            return self.args[0]
        elif self.type == TermType.ADD:
            return f"({self.args[0]} + {self.args[1]})"
        elif self.type == TermType.SUB:
            return f"({self.args[0]} - {self.args[1]})"
        elif self.type == TermType.NEG:
            return f"-{self.args[0]}"
        elif self.type == TermType.MUL:
            return f"({self.args[0]} * {self.args[1]})"
        elif self.type == TermType.DIV:
            return f"({self.args[0]} / {self.args[1]})"
```

So where exactly did we make our recursive calls? Well thats a bit tricky to see because it's hidden. Every time we wrote `{self.args[0]}`
we implicitly called `__repr__` on those instances. No when we print our expression `f` we get something similar:

```python
>>> f = ((x + c1) * (x - c2)) / (x * x)
>>> print(f)
>>> (((x + 2) * (x - 3)) / (x * x))
```

-Differentiation-
We now get to the workhorse of our symbolic differentiator. We'll call this function `diffy`. It will be yet another function that
performs structural recursion on our `Term` instances. Since our function operates on `Term` instances which represent terms in
our formal language we're able to perform operations on terms by proxy in a computational manner. The differentiation operator
from mathematics is no different.

At its core differentiation is a set of rules that map terms in our formal language to other terms also found in the formal language.
Let's take a look at a few of the ones that you might remember from calculus class.

$\frac{d}{dx}c = 0$

$\frac{d}{dx}x = 1$

$\frac{d}{dx}[f(x) + g(x)] = \frac{d}{dx}f(x) + \frac{d}{dx}g(x)$

$\frac{d}{dx}[-f(x)] = -\frac{d}{dx}f(x)$

$\frac{d}{dx}[f(x) - g(x)] = \frac{d}{dx}f(x) - \frac{d}{dx}g(x)$

$\frac{d}{dx}[f(x) \cdot g(x)] = g(x) \cdot \frac{d}{dx}f(x) + f(x) \cdot \frac{d}{dx} g(x)$

$\frac{d}{dx}\frac{f(x)}{g(x)} = \frac{g(x) \cdot \frac{d}{dx} f(x) - f(x) \cdot \frac{d}{dx}g(x)}{g(x) \cdot g(x)}$

Where $c \in \mathcal{L}$ is a const and $f, g \in \mathcal{L}$ are terms.

Do you notice anything about these rules? Yup, they are recursive definitions with the exeception of the first two which
serve as our base cases. These are all the mapping rules you need to express the derivative of any term in our formal language.
If you look at each of these rules, you'll notice that they can be grouped by the operator type that is involved. Let's see
how we can implement this in our `Term` class.

```python
class Term:
    ...
    def diffy(self):
        """ Differentiate this Term. """
        if self.type == TermType.CONST:
            return Term(TermType.CONST, ["0"])
        elif self.type == TermType.VAR:
            return Term(TermType.CONST, ["1"])
        elif self.type == TermType.NEG:
            return Term(TermType.NEG, [self.args[0].diffy()])
        else:
            arg0_diffy = self.args[0].diffy()
            arg1_diffy = self.args[1].diffy()
            if self.type == TermType.ADD:
                return Term(TermType.ADD, [arg0_diffy, arg1_diffy])
            elif self.type == TermType.SUB:
                return Term(TermType.SUB, [arg0_diffy, arg1_diffy])
            elif self.type == TermType.MUL:
                return Term(TermType.ADD, [
                    Term(TermType.MUL, [arg0_diffy, self.args[1]]),
                    Term(TermType.MUL, [self.args[0], arg1_diffy])
                ])
            elif self.type == TermType.DIV:
                return Term(TermType.DIV, [
                    Term(TermType.SUB, [
                        Term(TermType.MUL, [arg0_diffy, self.args[1]]),
                        Term(TermType.MUL, [self.args[0], arg1_diffy])
                    ]),
                    Term(TermType.MUL, [self.args[1], self.args[1]])
                ])
```

We can now call `diffy` on any `Term` instance and through the power of structural recursion get back its symbolic derivative as another
`Term` instance.

-Simplifying Terms-
Let's take a look at the derivative of our term `f` that we've define earlier.

```python
>>> g = ((x + c1) * (x - c2)) / (x * x)
>>> g.diffy()
>>> ((((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * (x * x)) - (((x + 2) * (x - 3)) * ((1 * x) + (x * 1)))) / ((x * x) * (x * x)))
```

While our `__repr__` function goes a long way in getting a representation that doesn't make you nauseous, this is still quite a bit of text
to represent our output. Thankfully we can do a little bit better than this.

If you look closely at the derivative of `f`, you'll find a couple of compound terms that you might be able to simplify mathematically. We
now introduce a set of reduction rules that map some complex terms in our formal language to simpler ones. As with the mapping rules used
for differentiation, our reduction rules here have corresponding implementations in our symbolic differentiator. Let's take a look at a few
of these rules which may be familiar.

Let $a, b \in \mathcal{L}$ be constants and $f, g \in \mathcal{L}$ be compound term.

$0 + f \rightarrow{} f$

$f + 0 \rightarrow{} f$

$f - 0 \rightarrow{} f$

$0 - f \rightarrow{} -f$

$f - f \rightarrow 0$

$0 \times f \rightarrow{} 0$

$f \times 0 \rightarrow{} 0$

$1 \times f \rightarrow{} f$

$f \times 1 \rightarrow{} f$

$0 \div f \rightarrow{} 0$

-->$f \div 0 \rightarrow{} f \div 0$ print warning

$f \div 1 \rightarrow{} f$

-->$f \div f \rightarrow{} f \div f$ print warning

$a + b = compute(a + b)$

$a - b = compute(a - b)$

$a \times b = compute(a \times b)$

$a \div b = compute(a \div b)$

Some of these I've listed, but they would result in an error if you actually computed them. For example
dividing by zero has no meaning. When we encounter such a simplification we will print a warning message
to the user and return the same term as its simplification.

We also won't be simplifying terms where a sub term is divided by the same subterm. This would patch over
discontinuities when the denominator is 0 and the derivative doesn't exist.

We'll call our function `simp`, being short for simplify but also just because : ) `simp` will again involve
structural recursion on our `Term` instances. Atomic terms in our formal language will help us define our
base cases for our recursive function. For all other term types, we will first make recursive calls to simplify
the arguments, and then perform our simplification for this term based on the new argument terms.

A key note about some of the simplification rules that we dfine above. You'll notice that some of these rules
are symmetric: having the same result when we swap the arguments in our simplification rule. We'll have to 
handle both of the case if we want to get nicely simplified terms. After implementing all the simplification
rules we add a catch-all statment in case we can't simplify the current term. In this case we'll simplify the
sub terms and return a new term with the current term's type and the simplified arguments.

```python
class Term:
    ...
    def simp(self):
        """ Simplify this Term if possible. """        
        if self.type == TermType.CONST:
            return self
        elif self.type == TermType.VAR:
            return self
        
        simp_args = [arg.simp() for arg in self.args]
        simp_types = [arg.type for arg in simp_args]
        simp_values = [float(simp_args[i].args[0]) if simp_types[i] == TermType.CONST else simp_args[i] for i in range(len(simp_args))]

        if self.type == TermType.ADD:
            if simp_types[0] == TermType.CONST and simp_types[1] == TermType.CONST:
                return Term(TermType.CONST, [str(simp_values[0] + simp_values[1])])
            elif simp_types[0] == TermType.CONST and simp_values[0] == 0:
                return simp_args[1]
            elif simp_types[1] == TermType.CONST and simp_values[1] == 0:
                return simp_args[0]
        elif self.type == TermType.SUB:
            if simp_types[0] == TermType.CONST and simp_types[1] == TermType.CONST:
                return Term(TermType.CONST, [str(simp_values[0] - simp_values[1])])
            elif simp_types[0] == TermType.CONST and simp_values[0] == 0:
                return Term(TermType.NEG, [simp_args[1]])
            elif simp_types[1] == TermType.CONST and simp_values[1] == 0:
                return simp_args[0]
            elif str(simp_args[0]) == str(simp_args[1]):
                return Term(TermType.CONST, ["0"])
        elif self.type == TermType.MUL:
            if simp_types[0] == TermType.CONST and simp_types[1] == TermType.CONST:
                return Term(TermType.CONST, [str(simp_values[0] * simp_values[1])])
            elif simp_types[0] == TermType.CONST:
                if simp_values[0] == 0:
                    return Term(TermType.CONST, ["0"])
                elif simp_values[0] == 1:
                    return simp_args[1]
            elif simp_types[1] == TermType.CONST:
                if simp_values[1] == 0:
                    return Term(TermType.CONST, ["0"])
                elif simp_values[1] == 1:
                    return simp_args[0]
        elif self.type == TermType.DIV:
            if simp_types[0] == TermType.CONST and simp_types[1] == TermType.CONST:
                if simp_values[1] != 0:
                    return Term(TermType.CONST, [str(simp_values[0] / simp_values[1])])
                # Return handled by catch-all
                print("Warning: Constant-Constant division by zero.")
            elif simp_types[0] == TermType.CONST and simp_values[0] == 0:
                return Term(TermType.CONST, ["0"])
            elif simp_types[1] == TermType.CONST:
                if simp_values[1] == 0:
                    print("Warning: Constant-Term division by zero.")
                elif simp_values[1] == 1:
                    return simp_args[0]
            elif str(simp_args[0]) == str(simp_args[1]):
                print(f"Warning: Not simplifying discontinuity @ 0={simp_args[0]}")
                
        return Term(self.type, simp_args)
```

This certainly goes a long way from turning `Term`'s like:

```python
>>> (((((((((((((((0 + 0) * (x - 3)) + ((0 + 0) * (1 - 0))) + (((0 + 0) * (1 - 0)) + 
    ((1 + 0) * (0 - 0)))) + ((((0 + 0) * (1 - 0)) + ((1 + 0) * (0 - 0))) + (((1 + 0) * 
    (0 - 0)) + ((x + 2) * (0 - 0))))) * (x * x)) + (((((0 + 0) * (x - 3)) + ((1 + 0) * (1 - 0))) + 
    (((1 + 0) * (1 - 0)) + ((x + 2) * (0 - 0)))) * ((1 * x) + (x * 1)))) + ((((((0 + 0) * (x - 3)) + 
    ((1 + 0) * (1 - 0))) + (((1 + 0) * (1 - 0)) + ((x + 2) * (0 - 0)))) * ((1 * x) + (x * 1))) + 
    ((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * (((0 * x) + (1 * 1)) + ((1 * 1) + (x * 0)))))) - 
    (((((((0 + 0) * (x - 3)) + ((1 + 0) * (1 - 0))) + (((1 + 0) * (1 - 0)) + ((x + 2) * (0 - 0)))) * 
    ((1 * x) + (x * 1))) + ((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * (((0 * x) + (1 * 1)) + 
    ((1 * 1) + (x * 0))))) + (((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * (((0 * x) + (1 * 1)) + 
    ((1 * 1) + (x * 0)))) + (((x + 2) * (x - 3)) * ((((0 * x) + (0 * 1)) + ((0 * 1) + (1 * 0))) + 
    (((0 * 1) + (1 * 0)) + ((1 * 0) + (x * 0)))))))) * ((x * x) * (x * x))) + ((((((((0 + 0) * (x - 3)) + 
    ((1 + 0) * (1 - 0))) + (((1 + 0) * (1 - 0)) + ((x + 2) * (0 - 0)))) * (x * x)) + ((((1 + 0) * 
    (x - 3)) + ((x + 2) * (1 - 0))) * ((1 * x) + (x * 1)))) - (((((1 + 0) * (x - 3)) + ((x + 2) * 
    (1 - 0))) * ((1 * x) + (x * 1))) + (((x + 2) * (x - 3)) * (((0 * x) + (1 * 1)) + ((1 * 1) + 
    (x * 0)))))) * ((((1 * x) + (x * 1)) * (x * x)) + ((x * x) * ((1 * x) + (x * 1)))))) - 
    (((((((((0 + 0) * (x - 3)) + ((1 + 0) * (1 - 0))) + (((1 + 0) * (1 - 0)) + ((x + 2) * 
    (0 - 0)))) * (x * x)) + ((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * ((1 * x) + (x * 1)))) - 
    (((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * ((1 * x) + (x * 1))) + (((x + 2) * (x - 3)) * 
    (((0 * x) + (1 * 1)) + ((1 * 1) + (x * 0)))))) * ((((1 * x) + (x * 1)) * (x * x)) + ((x * x) * 
    ((1 * x) + (x * 1))))) + ((((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * (x * x)) - (((x + 2) * 
    (x - 3)) * ((1 * x) + (x * 1)))) * ((((((0 * x) + (1 * 1)) + ((1 * 1) + (x * 0))) * (x * x)) + 
    (((1 * x) + (x * 1)) * ((1 * x) + (x * 1)))) + ((((1 * x) + (x * 1)) * ((1 * x) + (x * 1))) + 
    ((x * x) * (((0 * x) + (1 * 1)) + ((1 * 1) + (x * 0))))))))) * (((x * x) * (x * x)) * ((x * x) * 
    (x * x)))) - ((((((((((0 + 0) * (x - 3)) + ((1 + 0) * (1 - 0))) + (((1 + 0) * (1 - 0)) + 
    ((x + 2) * (0 - 0)))) * (x * x)) + ((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * ((1 * x) + 
    (x * 1)))) - (((((1 + 0) * (x - 3)) + ((x + 2) * (1 - 0))) * ((1 * x) + (x * 1))) + (((x + 2) * 
    (x - 3)) * (((0 * x) + (1 * 1)) + ((1 * 1) + (x * 0)))))) * ((x * x) * (x * x))) - ((((((1 + 0) * 
    (x - 3)) + ((x + 2) * (1 - 0))) * (x * x)) - (((x + 2) * (x - 3)) * ((1 * x) + (x * 1)))) * 
    ((((1 * x) + (x * 1)) * (x * x)) + ((x * x) * ((1 * x) + (x * 1)))))) * ((((((1 * x) + (x * 1)) * 
    (x * x)) + ((x * x) * ((1 * x) + (x * 1)))) * ((x * x) * (x * x))) + (((x * x) * (x * x)) * 
    ((((1 * x) + (x * 1)) * (x * x)) + ((x * x) * ((1 * x) + (x * 1)))))))) / ((((x * x) * (x * x)) * 
    ((x * x) * (x * x))) * (((x * x) * (x * x)) * ((x * x) * (x * x)))))
```

Into ones which are much simpler:

```python
>>> (((((((((2.0 * (x + x)) + ((2.0 * (x + x)) + (((x - 3) + (x + 2)) * 2.0))) - (((2.0 * (x + x)) +
    (((x - 3) + (x + 2)) * 2.0)) + (((x - 3) + (x + 2)) * 2.0))) * ((x * x) * (x * x))) + ((((2.0 *
    (x * x)) + (((x - 3) + (x + 2)) * (x + x))) - ((((x - 3) + (x + 2)) * (x + x)) + (((x + 2) *
    (x - 3)) * 2.0))) * (((x + x) * (x * x)) + ((x * x) * (x + x))))) - (((((2.0 * (x * x)) +
    (((x - 3) + (x + 2)) * (x + x))) - ((((x - 3) + (x + 2)) * (x + x)) + (((x + 2) * (x - 3)) * 2.0))) *
    (((x + x) * (x * x)) + ((x * x) * (x + x)))) + (((((x - 3) + (x + 2)) * (x * x)) - (((x + 2) *
    (x - 3)) * (x + x))) * (((2.0 * (x * x)) + ((x + x) * (x + x))) + (((x + x) * (x + x)) +
    ((x * x) * 2.0)))))) * (((x * x) * (x * x)) * ((x * x) * (x * x)))) - ((((((2.0 * (x * x)) +
    (((x - 3) + (x + 2)) * (x + x))) - ((((x - 3) + (x + 2)) * (x + x)) + (((x + 2) * (x - 3)) * 2.0))) *
    ((x * x) * (x * x))) - (((((x - 3) + (x + 2)) * (x * x)) - (((x + 2) * (x - 3)) * (x + x))) *
    (((x + x) * (x * x)) + ((x * x) * (x + x))))) * (((((x + x) * (x * x)) + ((x * x) * (x + x))) *
    ((x * x) * (x * x))) + (((x * x) * (x * x)) * (((x + x) * (x * x)) + ((x * x) * (x + x))))))) /
    ((((x * x) * (x * x)) * ((x * x) * (x * x))) * (((x * x) * (x * x)) * ((x * x) * (x * x)))))
```

Well, maybe not by much but it definitely goes a long way 😅

There's definitely a lot more you could do to get these terms to condense. For now I'm going to stop here
but I'll leave a couple of rules that keen readers can implement. I'll cover these and a larger set of operator types
in a future post.

$f + f \rightarrow{} 2 \times f$

$(a \times f) + (b \times f) \rightarrow compute(a + b) \times f$

$-(-f) \rightarrow f$

$\frac{a \times f}{b \times g} \rightarrow compute(a / b) \times \frac{f}{g}$

***Hope you learned something, and see you next time. Feel free to email me if you have any questions : )***